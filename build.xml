<?xml version="1.0"?>

<project name="Apache Sandesha" default="usage" basedir=".">
    <!-- =================================================================== -->
    <description>
   Build file for Apache Sandesha

   This file is intended for ANT, a Java based build tool.
   ANT is available from http://jakarta.apache.org/ant/index.html

Prerequisites:
   J2SDK 1.4          from http://java.sun.com/
   jakarta-ant        from http://jakarta.apache.org/ant/
   commons-logging    from http://jakarta.apache.org/commons/logging.html
   log4j              from http://jakarta.apache.org/log4j

Optional components:
   junit              from http://www.junit.org/

Build Instructions:
   To build, run

     ant "target"

   on the directory where this file is located with the target you want.

    </description>

    <target name="init">
        <property name="product.Name" value="Apache-Sandesha-J"/>
        <property name="product.name" value="sandesha"/>
        <property name="product.shortname" value="sandesha"/>

        <property name="product.version.major" value="1"/>
        <property name="product.version.minor" value="0"/>
        <property name="product.version.level" value="Beta2"/>
        <property name="product.Version" value="${product.version.major}.${product.version.minor}.${product.version.level}"/>
        <property name="product.version" value="${product.version.major}.${product.version.minor}.${product.version.level}"/>
        <property name="product_version" value="${product.version.major}_${product.version.minor}_${product.version.level}"/>
        <property name="year" value="2004"/>
        <property name="copyright" value="Copyright &#169; ${year} Apache Sandesha Project. All Rights Reserved."/>

        <!-- Give user a chance to override without editing this file
             (and without typing -D each time it compiles it) -->
        <property file="./build.properties"/>
        <property file="${user.home}/build.properties"/>

        <!-- Place Holder for proxy settings -->
        <property name="http.proxyHost" value=""/>
        <property name="http.proxyPort" value=""/>
        <property name="http.nonProxyHosts" value="localhost"/>
        <property name="http.proxyUser" value=""/>
        <property name="http.proxyPassword" value=""/>

        <property name="dir.doc" value="./doc"/>
        <property name="dir.dist" value="./dist"/>
        <property name="dir.libs" value="./lib"/>
        <property name="dir.src" value="./src"/>
        <property name="dir.samples" value="./samples"/>
        <property name="dir.test" value="./test"/>
        <property name="dir.keys" value="./keys"/>
        <property name="dir.specs" value="./specs"/>
        <property name="dir.interop" value="./interop"/>
        <property name="dir.webapp" location="./webapps/axis" />

        <property name="build.dir" value="./build"/>
        <property name="build.classes" value="${build.dir}/classes"/>
        <property name="build.work" value="${build.dir}/work"/>
        <property name="build.webapp" location="${build.dir}/webapps/axis"/>

        <property name="jar.library" value="${product.shortname}.jar"/>

        <property name="build.doc" value="${build.dir}/doc"/>
        <property name="build.doc.xml" value="${build.doc}/xml"/>
        <property name="build.doc.html" value="${build.doc}/html"/>
        <property name="build.javadoc" value="${build.doc.html}/api"/>
        <property name="build.junit.xml" value="${build.doc.xml}/junit"/>
        <property name="build.junit.html" value="${build.doc.html}/junit"/>


        <!-- 

         for the time being following path id uses the libs in the sandesha
         lib directory only This is done to test if we really don't need
         any axis libs. After this is done we can include the
         java.class.path and leave the sandesha/lib empty. This requires that
         the CLASSPATH includes all required packages (see above

	ALEK: thos does nto seems to be true as start-functional-test-http-server depends on AXIS.jar (what version?)
         -->
        <path id="classpath.libraries" description="3rd party libs">
            <fileset dir="${dir.libs}">
                <include name="**/*.jar"/>
                <!-- <pathelement path="${java.class.path}"/> -->
            </fileset>
        </path>

        <path id="classpath.sandesha" description="sandesha classes; first try pure class files, then jars">
            <pathelement path="${build.classes}"/>
            <pathelement path="${build.dir}/${jar.library}"/>
        </path>

        <path id="classpath.library">
            <path refid="classpath.sandesha"/>
            <path refid="classpath.libraries"/>
        </path>

        <taskdef resource="axis-tasks.properties" classpathref="classpath.library"/>
        <taskdef name="runaxisfunctionaltests" classname="org.apache.axis.tools.ant.axis.RunAxisFunctionalTestsTask"
            loaderref="axis">
            <classpath refid="classpath.library"/>
        </taskdef>
      
        <!-- this shall include Axis jars because the tests use the
         Axis implementation of javax.xml.soap, etc. Therefore the
         CLASSPATH is included.
         -->
        <path id="classpath.test">
            <!-- classpath for test is librarypath plus junit -->
            <path refid="classpath.library"/>
            <pathelement path="${java.class.path}"/>
        </path>

        <path id="classpath.test.jar">
            <!-- classpath for test is librarypath plus junit -->
            <path refid="classpath.library"/>
            <pathelement path="${build.dir}/${jar.library}"/>
            <pathelement path="${build.dir}/${jar.tests}"/>
        </path>

        <patternset id="distFiles">
            <include name="build.xml"/>
            <include name="LICENSE.txt"/>
        </patternset>

        <patternset id="srcFiles">
            <!-- for some strange reasons, I can't use ${src} but must use src -->
            <include name="src/**/*"/>
        </patternset>

        <patternset id="srcSamplesFiles">
            <include name="samples/**/*"/>
        </patternset>

        <patternset id="srcUnitTestsFiles">
            <include name="test/**/*"/>
        </patternset>

        <patternset id="srcInteropFiles">
            <include name="interop/**/*"/>
        </patternset>

        <property name="javadoc.packages"
            value="
org.apache.sandesha,
org.apache.sandesha.client,
org.apache.sandesha.server,
org.apache.sandesha.ws,
org.apache.sandesha.ws.rm,
org.apache.sandesha.ws.utility,
org.apache.sandesha.ws.rm.handlers,
org.apache.sandesha.ws.rm.providers
"/>

        <echo message="-------------------------------------------------------------------"/>
        <echo message="-------------- ${product.Name} v${product.Version} [${year}] ----------------"/>
        <echo message="-------------------------------------------------------------------"/>
        <echo message="Building with ${ant.version}"/>
        <echo message="using build file ${ant.file}"/>
        <echo message="Java ${java.version} located at ${java.home} "/>
        <echo message="-------------------------------------------------------------------"/>
        <echo message="--- Property values ---" />
        <echo message="sun.boot.class.path=${sun.boot.class.path}"/>
        <pathconvert targetos="windows" property="classpath.test.as.string" refid="classpath.test"/>
        <echo message="classpath.test: ${classpath.test.as.string}"/>
        <echo message="" />

    </target>

    <target name="usage" depends="init">
        <echo message="                                                                   "/>
        <echo message="                                                                   "/>
        <echo message=" Build instructions                                                "/>
        <echo message="-------------------------------------------------------------------"/>
        <echo message="                                                                   "/>
        <echo message=" available targets are:                                            "/>
        <echo message="                                                                   "/>
        <echo message="   compile         --> compiles everything                         "/>
        <echo message="   compile.library --> compiles the source code                    "/>
        <echo message="   compile.samples --> compiles the samples source code            "/>
        <echo message="   compile.tests   --> compiles the tests source code              "/>
        <echo message="   compile.interop --> compiles the interop source code            "/>
        <echo message="                                                                   "/>
        <echo message="   javadoc         --> generates the API documentation             "/>
        <echo message="                       (needs Java > 1.2)                          "/>
        <echo message="                                                                   "/>
        <echo message="   test            --> runs the defined JUnit tests                "/>
        <echo message="   report          --> generates html report of test results       "/>
        <echo message="                                                                   "/>
        <echo message="   clean           --> cleans up all generated files and           "/>
        <echo message="                       directories                                 "/>
        <echo message="   jar             --> creates the JAR file                        "/>
        <echo message="   gump            --> includes javadoc, compile jar and test      "/>
        <echo message="                                                                   "/>
        <echo message="   usage           --> provides help on using the build tool       "/>
        <echo message="                       (default)                                   "/>
<!--        <echo message="                                                                   "/>
        <echo message="   changelog        generates changelog.html                    "/>
        <echo message="                                                                   "/> -->
        <echo message=" See comments inside the build.xml file for more details.          "/>
        <echo message="-------------------------------------------------------------------"/>
        <echo message="                                                                   "/>
    </target>

    <target name="clean" depends="init"
        description="Clean up all temporary build files">
        <delete dir="${build.dir}"/>
        <delete>
            <fileset dir="." includes="before*.xml"/>
            <fileset dir="." includes="after*.xml"/>
            <fileset dir="." includes="signed*.xml"/>
            <fileset dir="." includes="server*.wsdd"/>
            <fileset dir="." includes="client*.wsdd"/>
        </delete>
    </target>

    <target name="prepare" depends="init"
        description="This target generates a first build directory and checks for some libraries">
        <tstamp/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.dir}/test-reports"/>

        <available property="junit.present" classname="junit.framework.TestCase">
            <!-- check whether JUnit is available -->
            <classpath refid="classpath.test"/>
        </available>

        <available property="jdk14.present" classname="java.security.cert.CertPath">
            <!-- check whether JDK14 is available -->
            <classpath refid="classpath.test"/>
        </available>

        <available property="jdk15.present" classname="java.lang.instrument.Instrumentation">
            <!-- check whether JDK15 is available -->
            <classpath refid="classpath.test"/>
        </available>

        <available property="bc.present" classname="org.bouncycastle.jce.provider.BouncyCastleProvider">
            <!-- check whether BouncyCastle is available -->
            <classpath refid="classpath.test"/>
        </available>

        <echo message="--- Flags (Note: If the {property name} is displayed, "/>
        <echo message="           then the component is not present)"/>
        <echo message="jdk14.present=${jdk14.present}"/>
        <echo message="jdk15.present=${jdk15.present}"/>
        <echo message="bc.present=${bc.present}"/>

    </target>

    <!-- #################################################################### -->
    <!-- #################################################################### -->
    <!-- #################################################################### -->
    <!-- #################################################################### -->
    <!-- #################################################################### -->

    <target name="prepare-src" depends="prepare" description="This target copies the Java sources and brands the version information">
        <!-- create directories -->
        <mkdir dir="${build.classes}"/>
    </target>

    <target name="javadoc"
        depends="prepare-src"
        description="Generates javadoc from all .java files; this is done on the 'branded' files">
        <mkdir dir="${build.doc}"/>
        <mkdir dir="${build.doc.html}"/>
        <mkdir dir="${build.javadoc}"/>

        <javadoc destdir="${build.javadoc}"
            packagenames="${javadoc.packages}"
            classpathref="classpath.test">
            <!-- additionalparam="-breakiterator"-->
            <sourcepath>
                <pathelement location="${dir.src}"/>
            </sourcepath>
        </javadoc>
    </target>

    <!-- #################################################################### -->

    <!-- Aliases -->
    <target name="javadocs" depends="javadoc"/>
    <target name="jars" depends="jar"/>

    <!-- Collections -->
    <target name="gump" 
            depends="clean,javadoc,compile,test" 
            description="Target for the gump run"/>

    <target name="compile" 
            depends="compile.library"
            description="compile everything"/>

    <target name="test"
            depends="unitTests"
            description="unti tests only"/>        

    <target name="interop"
            depends="compile.interop,interopTests"
            description="interop tests"/>        

    <!-- #################################################################### -->

    <target name="compile.library" depends="prepare-src">
        <!-- Compile the java code from ${dir.src} into ${build.classes} -->
        <javac srcdir="${dir.src}" destdir="${build.classes}" debug="on">
            <classpath refid="classpath.library"/>
            <exclude name="**/Merlin.java" unless="jdk14.present"/>
            <!-- <exclude name="**/MerlinPFX.java" unless="jdk14.present"/> -->
            <exclude name="**/BouncyCastle.java" unless="bc.present"/>
        </javac>
        <!-- Copy Property files -->
        <copy todir="${build.classes}">
            <fileset dir="${dir.src}">
                <include name="**/*.properties"/>
                <exclude name="**/axis/**/*.properties"/>
            </fileset>
        </copy>
    </target>

    <target name="compile.tests"
        depends="compile.interop"
        >
        <!-- Compile the java code from ${dir.src} into ${build.classes} -->
        <javac srcdir="${dir.test}" destdir="${build.classes}" debug="on">
            <classpath refid="classpath.test"/>
        </javac>
        <!-- Copy Property files -->
        <copy todir="${build.classes}">
            <fileset dir="${dir.test}" includes="**/*.properties"/>
            <fileset dir="${dir.interop}">
                <include name="**/*.properties"/>
            </fileset>
        </copy>
    </target>

    <target name="compile.samples"
        depends="compile.library">
        <!-- Compile the java code from ${dir.src} into ${build.classes} -->
        <javac srcdir="${dir.samples}"
            debug="on"
            destdir="${build.classes}">
            <classpath refid="classpath.library"/>
        </javac>
        <copy todir="${build.classes}">
            <fileset dir="${dir.src}" includes="**/axis/**/*.properties"/>
        </copy>
    </target>

    <target name="compile.interop"
        depends="compile.library">
        <javac srcdir="${dir.interop}" destdir="${build.classes}" debug="on">
            <classpath refid="classpath.library"/>
        </javac>

        <!--ant dir="${dir.interop}"
            antfile="build.xml"
            target="compile"
            inheritAll="false">
        </ant-->
    </target>

<target name="client.interop" depends="compile.interop">

    <java classname="org.apache.axis.utils.Admin" 
               fork="true" 
               dir="${basedir}">

      <arg value="client" />
      <arg value="${basedir}/${dir.interop}/org/apache/sandesha/samples/interop/ClientDeploy.wsdd" />

      <classpath>
         <path refid="classpath.library"/>
      </classpath>

    </java>

    <java classname="org.apache.sandesha.samples.interop.Scenario_1_1_Client" fork="true">
      <!-- TODO: allow to take it from command line -->
      <arg line="http://localhost:7080/axis/services/PingService"/>
      <classpath>
         <path refid="classpath.library"/>
      </classpath>
      </java>



</target>


<target name="deploy.interop" depends="compile.interop">

        <copy todir="${webapp_install}/WEB-INF/classes">
            <fileset dir="${build.classes}" includes="**"/>
        </copy>

        <copy todir="${webapp_install}/WEB-INF/lib">
            <fileset dir="lib" includes="**/addressing*.jar"/>
        </copy>

    <java classname="org.apache.axis.utils.Admin" 
               fork="true" 
               dir="${webapp_install}/WEB-INF">

      <arg value="server" />
      <arg value="${basedir}/${dir.interop}/org/apache/sandesha/samples/interop/ApplicationServiceDeploy.wsdd" />

      <classpath>
         <pathelement location="${deploy_location}"/>
         <path refid="classpath.library"/>
      </classpath>

    </java>

    <java classname="org.apache.axis.utils.Admin" 
               fork="true" 
               dir="${webapp_install}/WEB-INF">

      <arg value="server" />
      <arg value="${basedir}/${dir.src}/org/apache/sandesha/client/ClientEndpointManagerDeploy.wsdd" />

      <classpath>
         <pathelement location="${deploy_location}"/>
         <path refid="classpath.library"/>
      </classpath>

    </java>

</target>

<target name="deploy" depends="deploy.interop" />


<target name="systemTests"
        depends="compile, unitTests"
        if="junit.present"
        description="Runs all JUnit tests">
        <runaxisfunctionaltests
            url="http://localhost:8088"
            httpServerTarget="start-functional-test-http-server"
            testTarget="interopTests"
            httpStopTarget="stop-functional-test-http-server"/>
    </target>

    <target name="start-functional-test-http-server" if="junit.present" depends="init">
        <echo message="Starting http server."/>
        <java classname="org.apache.axis.transport.http.SimpleAxisServer" fork="yes" dir="${build.dir}">
            <classpath refid="classpath.library"/>
        </java>
    </target>

    <target name="stop-functional-test-http-server" if="junit.present">
        <echo message="Stopping http server."/>
        <java classname="org.apache.axis.client.AdminClient" fork="yes">
            <classpath refid="classpath.library"/>
            <arg line="quit"/>
        </java>
    </target>

    <target name="interopTests" depends="init">
        <echo message="Running system tests - BEGIN..."/>

        <path id="deploy_xml_files">
            <fileset dir="${build.work}">
                <include name="**/deploy.wsdd"/>
            </fileset>
        </path>
        <path id="undeploy_xml_files">
            <fileset dir="${build.work}">
                <include name="**/undeploy.wsdd"/>
            </fileset>
        </path>
        
        <mkdir dir="${build.work}"/>
        
<!-- ALEK
        <copy todir="${build.dir}/keys">
            <fileset dir="${dir.keys}" includes="**"/>
        </copy>
        <copy todir="${build.dir}/interop">
            <fileset dir="${dir.interop}" includes="*.jks"/>
        </copy>
-->        
        
        <property name="deploy_xml_property" refid="deploy_xml_files"/>
        <property name="undeploy_xml_property" refid="undeploy_xml_files"/>

        <java classname="org.apache.axis.utils.Admin" fork="true">
            <classpath refid="classpath.library"/>
            <arg value="client"/>
            <arg file="${build.work}/org/apache/ws/axis/oasis/Client_deploy.wsdd"/>
        </java>
        
        <java classname="org.apache.axis.client.AdminClient" fork="yes">
            <classpath refid="classpath.library"/>
            <arg line="${deploy_xml_property}"/>
        </java>

        <junit printsummary="yes"
            haltonfailure="yes"
            fork="yes"
            dir="${basedir}">
            <!-- See if this helps with Gump test failures -->
            <sysproperty key="build.clonevm" value="true"/>

            <jvmarg value="-Dhttp.proxyHost=${http.proxyHost}"/>
            <jvmarg value="-Dhttp.proxyPort=${http.proxyPort}"/>
            <jvmarg value="-Dhttp.nonProxyHosts=${http.nonProxyHosts}"/>
            <jvmarg value="-Dhttp.proxyUser=${http.proxyUser}"/>
            <jvmarg value="-Dhttp.proxyPassword=${http.proxyPassword}"/>
            <classpath refid="classpath.test"/>
            <formatter type="xml"/>
            <batchtest todir="${build.dir}/test-reports">
                <fileset dir="${build.classes}">
                    <include name="**/interop/PackageTests.class"/>
                </fileset>
            </batchtest>
        </junit>

        <java classname="org.apache.axis.client.AdminClient" fork="yes">
            <classpath refid="classpath.library"/>
            <arg line="${undeploy_xml_property}"/>
        </java>
        
        <echo message="Running system tests - END..."/>
    </target>

    <target name="unitTests" depends="compile">
        <junit printsummary="yes"
            haltonfailure="yes"
            fork="yes"
            dir="${basedir}">
            <!-- See if this helps with Gump test failures -->
            <sysproperty key="build.clonevm" value="true"/>

            <jvmarg value="-Dhttp.proxyHost=${http.proxyHost}"/>
            <jvmarg value="-Dhttp.proxyPort=${http.proxyPort}"/>
            <jvmarg value="-Dhttp.nonProxyHosts=${http.nonProxyHosts}"/>
            <jvmarg value="-Dhttp.proxyUser=${http.proxyUser}"/>
            <jvmarg value="-Dhttp.proxyPassword=${http.proxyPassword}"/>
            <classpath refid="classpath.test"/>
            <formatter type="xml"/>
            <batchtest todir="${build.dir}/test-reports">
                <fileset dir="${build.classes}">
                    <include name="**/wssec/PackageTests.class"/>
                    <include name="**/components/PackageTests.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!-- generate a report from all the tests. 
           requires Xalan or other XSLT engine in ant\lib-->
    <target name="report" depends="prepare">
        <junitreport todir="${build.dir}/test-reports">
            <fileset dir="${build.dir}/test-reports">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${build.dir}/test-reports/html"/>
        </junitreport>
        <echo message="point your browser to ${build.dir}/test-reports/html/index.html"/>
    </target>

    <target name="jar"
        depends="compile"
        description="Creates the ${jar.library}">

        <jar jarfile="${build.dir}/${jar.library}"
            basedir="${build.classes}"
            includes="**/*, *.txt"
            />
    </target>

    <target name="dist" depends="gump" description="Build zip file for distro">
<!--     <target name="dist" depends="init" description="Build zip file for distro"> -->
        <mkdir dir="${dir.dist}"/>
        <jar jarfile="${dir.dist}/${jar.library}"
            basedir="${build.classes}"
            includes="**/apache/**/security/**"  />
        <zip destfile="${dir.dist}/${product.shortname}-${product.version}.zip">
            <zipfileset prefix="sandesha" dir="."
                includes="keys/**, interop/**, test/**, samples/**"/>
            <zipfileset prefix="sandesha/classes" dir="${build.classes}"
                includes="interop/**, sandesha/**, org/**/oasis/**, org/**/samples/**"/>
            <zipfileset prefix="sandesha/api" dir="${build.javadoc}"/>
            <zipfileset fullpath="sandesha/${jar.library}" dir="${dir.dist}" includes="${jar.library}"/>
        </zip>
	  <delete file="${dir.dist}/${jar.library}" />
    </target>

    <target name="srcdist" depends="init" description="Build source zip file for distro">
        <mkdir dir="${dir.dist}"/>
        <zip destfile="${dir.dist}/${product.shortname}-${product.version}-src.zip">
            <zipfileset prefix="sandesha" dir="."
                includes="src/** LICENSE.txt build.xml "/>
        </zip>
    </target>

    <target name="fixcrlf"
        description="Fixes CRLF">
        <fixcrlf srcdir="."
            eol="crlf"
            includes="**/*.java"
            />
        <fixcrlf srcdir="."
            eol="crlf"
            includes="**/*.properties"
            />
    </target>

	<!-- This target is outdated
    <target name="changelog"
        depends="prepare"
        description="Generate the changelog for Sandesha project">
        <cvschangelog dir="."
            destfile="${build.dir}/changelog.xml"
            />
        <style in="${build.dir}/changelog.xml"
            out="${build.dir}/changelog.html"
            style="./tools/changelog.xsl">
            <param name="title" expression="Sandesha ChangeLog"/>
            <param name="module" expression="sandesha"/>
            <param name="cvsweb" expression="http://cvs.apache.org/viewcvs/ws-fx/sandesha/"/>
        </style>
    </target>
    -->

  <!-- =================================================================== -->
  <!-- Creates a war file for interop testing                              -->
  <!-- =================================================================== -->
  <target name="interop-war" depends="test"
      description="Create the web application" >
    <mkdir dir="${build.webapp}"/>
    <copy todir="${build.webapp}">
      <fileset dir="${dir.webapp}"/>
    </copy>
    <copy todir="${build.webapp}/WEB-INF/lib">
      <fileset dir="${dir.libs}">
        <include name="*.jar"/>
      </fileset>
    </copy>
    <copy todir="${build.webapp}/WEB-INF">
      <fileset dir="${build.dir}">
        <include name="*.wsdd"/>
      </fileset>
    </copy>
    <copy todir="${build.webapp}/WEB-INF/classes/">
      <fileset dir="${build.classes}"/>
    </copy>
    <copy todir="${build.webapp}/WEB-INF/classes/">
      <fileset dir=".">
          <include name="client-config.wsdd"/>
      </fileset>
    </copy>
    <copy todir="${build.webapp}/WEB-INF/classes/interop">
        <fileset dir="${dir.interop}">
            <include name="**/interop.jks"/>
        </fileset>
    </copy>

    <delete>
      <fileset dir="${build.webapp}" includes="**/CVS"/>
    </delete>
    <path id="deploy_xml_files">
        <fileset dir="${build.work}">
            <include name="**/deploy.wsdd"/>
        </fileset>
    </path>
    <property name="deploy_xml_property" refid="deploy_xml_files"/>
    <java classname="org.apache.axis.utils.Admin" fork="yes" dir="${build.webapp}/WEB-INF">
        <classpath refid="classpath.library"/>
        <arg line="server"/>
        <arg line="${deploy_xml_property}"/>
    </java>

    <jar jarfile="${build.dir}/axis.war" basedir="${build.webapp}"/>
  </target>

</project>
